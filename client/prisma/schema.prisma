datasource database {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Chatbot {
  id               String                  @id @default(uuid())
  clerkUserId      String   
  name             String
  createdAt        DateTime                @default(now()) @map("created_at")
  characteristics  ChatbotCharacteristic[]
  sessions         ChatSession[]
}

model ChatbotCharacteristic {
  id         String   @id @default(uuid())
  chatbotId  String   
  content    String
  createdAt  DateTime @default(now()) 
  chatbot    Chatbot  @relation(fields: [chatbotId], references: [id], onDelete: Cascade)

  @@index([chatbotId])
}

model Guest {
  id        String      @id @default(uuid())
  name      String?
  email     String @unique
  clerkid String @unique
  isAdmin Boolean @default(false)
  createdAt DateTime    @default(now()) 
  sessions  ChatSession[]
}

model ChatSession {
  id        String      @id @default(uuid())
  chatbotId String      
  guestId   String?     
  createdAt DateTime    @default(now()) 
  chatbot   Chatbot     @relation(fields: [chatbotId], references: [id], onDelete: Cascade)
  guest     Guest?      @relation(fields: [guestId], references: [id], onDelete: SetNull)
  messages  Message[]

  @@index([chatbotId])
  @@index([guestId])
}

enum SenderType {
  user
  ai
}

model Message {
  id           String     @id @default(uuid())
  chatSessionId String   
  content      String
  createdAt    DateTime    @default(now()) 
  sender       SenderType
  chatSession  ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  @@index([chatSessionId])
}
